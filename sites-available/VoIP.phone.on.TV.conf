server {
    listen      8080;
    listen      [::]:8080;

    # security
    include     nginxconfig.io/security.conf;
    
    location /voip {
        default_type text/html;
            access_by_lua_block {
                
                --process the inbound request from SipGate IO

                --simple validation
                local function checkCallerOk()
                    if ngx.var.remote_addr ~= "217.116.118.254" then
                        --caller is not SipGate IOs IP address. Just log it for now
                        ngx.log(ngx.WARN, "potentially bad actor request from IP address: ", ngx.var.remote_addr)
                        return false
                    end
                    return true
                end

                --HTTP POST variable read from the request
                local function readCallingNumber()
                    local calling_number = "<unset>"
                    ngx.req.read_body()

                    local args, err = ngx.req.get_post_args(10)

                    if err == "truncated" then
                        ngx.say("error reading HTTP POST args: ", err)
                        return calling_number
                    end

                    if not args then
                        ngx.say("failed to read HTTP POST args: ", err)
                        return calling_number
                    end
                    
                    for key, val in pairs(args) do
                        if key == "from" then
                            if type(val) == "table" then
                                calling_number = val[1]                                                    
                            else
                                calling_number = val                            
                            end 
                            break                       
                        end
                    end
                    return calling_number
                end

                local function httpPostToAndroidTV(calling_number, caller_name)
                    --performs a HTTP json POST to the nl.rogro82.pipup app (192.168.0.15:7979/notify) running on Android TV
                    local no_name_json_payload_template = "{ \"duration\": 15, \"position\": 1, \"title\": \"Incoming call\", \"titleColor\": \"#0066cc\", \"titleSize\": 20,\"message\": \"<NUMBER> is calling\", \"messageColor\": \"#000000\", \"messageSize\": 14, \"backgroundColor\": \"#ffffff\", \"media\": { \"image\": { \"uri\": \"http://192.168.0.10/phone.png\", \"width\": 128 }}}"

                    local with_name_json_payload_template = "{ \"duration\": 15, \"position\": 1, \"title\": \"Incoming call\", \"titleColor\": \"#0066cc\", \"titleSize\": 20,\"message\": \"<NAME> is calling (<NUMBER>)\", \"messageColor\": \"#000000\", \"messageSize\": 14, \"backgroundColor\": \"#ffffff\", \"media\": { \"image\": { \"uri\": \"http://192.168.0.10/phone.png\", \"width\": 128 }}}"

                    local json_payload
                    
                    if caller_name ~= "" then
                        json_payload = with_name_json_payload_template:gsub("<NAME>", caller_name)
                        json_payload = json_payload:gsub("<NUMBER>", calling_number)
                    else
                        json_payload = no_name_json_payload_template:gsub("<NUMBER>", calling_number)
                    end
                                        
                    --ngx.log(ngx.WARN, json_payload)
                    
                    local http = require "resty.http"
                    local httpc = http.new()

                    local res, err = httpc:request_uri("http://192.168.0.15:7979/notify", {
                        method = "POST",
                        body = json_payload,
                        headers = {
                            ["Content-Type"] = "application/json",
                        },
                        keepalive_timeout = 60000,
                        keepalive_pool = 10
                    })
                end

                if not(checkCallerOk()) then
                    return
                end

                local function getCallerName(calling_number)
                    local number_dictionary = require "number_dictionary"
                    local caller_name = ""
                    caller_name = number_dictionary.get_caller_name(calling_number)                    
                    return caller_name
                end
                
                local calling_number = readCallingNumber()
                if calling_number ~= "<unset>" then
                    local caller_name = getCallerName(calling_number)
                    httpPostToAndroidTV(calling_number, caller_name)                    
                end
                --ngx.log(ngx.WARN, calling_number)
            }

            content_by_lua_block {
                ngx.say("<p>processed</p>")
            }
    }

    # additional config
    include nginxconfig.io/general.conf;
}